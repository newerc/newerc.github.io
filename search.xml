<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ICP迭代最近点算法</title>
      <link href="/2024/10/20/ICP%E8%BF%AD%E4%BB%A3%E6%9C%80%E8%BF%91%E7%82%B9%E7%AE%97%E6%B3%95/"/>
      <url>/2024/10/20/ICP%E8%BF%AD%E4%BB%A3%E6%9C%80%E8%BF%91%E7%82%B9%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="迭代最近点——Iterative-Closest-Point"><a href="#迭代最近点——Iterative-Closest-Point" class="headerlink" title="迭代最近点——Iterative Closest Point"></a><strong>迭代最近点——Iterative Closest Point</strong></h1><span id="more"></span><p>【点云匹配算法】</p><p>使用领域——三维重建、医学图像处理、机器人视觉、自动驾驶</p><p>在ICP细化中，通过迭代计算最小化两个点云之间的距离，来优化一个点云到另一个点云的转换矩阵（旋转矩阵和平移向量）。</p><p>通过反复迭代，ICP细化算法逐步将两个点云对齐，使得误差越来越小，最终达到一个比较好的配准效果。</p><p>ICP细化算法的具体步骤如下：</p><p>初始化：设定目标点云$P$和源点云$Q$，以及初步的变换矩阵$T_{0}$。</p><p>配准迭代：对于每一次迭代$i=1,2,3,…$，都执行以下步骤：</p><ul><li>a. 对于每个点$p$在目标点云中，找到其在源点云中最近的点$q$。</li></ul><ul><li>b. 计算每对匹配点之间的偏移量（即源点云中的点$q$到目标点云中的点$p$之间的向量$T_{i-1}q-p$）。</li></ul><ul><li>c. 通过最小二乘法估计一个变换矩阵$T_{i}$，将源点云中的点移动和旋转，以最小化偏移量的平方和。</li></ul><ul><li>d. 如果变换矩阵$T_{i}$的误差已经足够小（例如，小于一个阈值），则停止迭代，输出变换矩阵$T_{i}$；否则返回步骤2b。</li></ul><p>输出结果：输出最终的变换矩阵$T_{i}$，将源点云$Q$变换到与目标点云$P$对齐的位置。</p><p>Attention：ICP细化算法的收敛性和准确性与初始变换$T_{0}$的选择密切相关——&gt;选择一个好的初始变换矩阵</p><p>ICP细化算法对噪声和局部最优解比较敏感，需要根据实际应用场景进行调参。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 点云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeGO-LOAM</title>
      <link href="/2024/10/19/LeGO-LOAM/"/>
      <url>/2024/10/19/LeGO-LOAM/</url>
      
        <content type="html"><![CDATA[<h1 id="LeGO-LOAM"><a href="#LeGO-LOAM" class="headerlink" title="LeGO-LOAM"></a>LeGO-LOAM</h1><p>这篇论文介绍了一种名为LeGO-LOAM（Lightweight and Ground-Optimized Lidar Odometry and Mapping）的<strong>轻量级、针对地面优化的激光雷达里程计和建图方法</strong>。</p><span id="more"></span><h2 id="0-概述"><a href="#0-概述" class="headerlink" title="0.概述"></a>0.概述</h2><p>这篇论文介绍了一种名为LeGO-LOAM（Lightweight and Ground-Optimized Lidar Odometry and Mapping）的<strong>轻量级、针对地面优化的激光雷达里程计和建图方法</strong>。LeGO-LOAM<strong>旨在为地面车辆提供实时的六自由度姿态估计</strong>。该方法的特点如下：</p><ol><li><p>轻量化：能够在低功耗的嵌入式系统上实现实时姿态估计。</p></li><li><p>地面优化：利用地面平面在分割和优化步骤中的存在。</p></li><li><p>实时性能：通过点云分割滤除噪声，通过特征提取获得独特的平面和边缘特征，然后使用两步Levenberg-Marquardt优化方法来解决连续扫描间的六自由度变换的不同部分。</p></li></ol><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><ul><li>本文侧重于使用3D激光雷达来支持实时状态估计和映射</li></ul><ul><li><p>寻找两次激光雷达扫描之间转换的典型方法——迭代最近点（ICP）。当扫描包含大量的点时，受到高昂的计算成本影响——&gt;引入了一种点对平面ICP的变体，将点与局部平面斑块相匹配；Generalized-ICP提出了一种匹配两次扫描的局部平面斑块的方法。使用有效简单的技术从点云中提取这些特征——特征直方图、视点特征直方图；使用Kanade-Tomasi角检测器从点云中提取通用特征的方法……</p></li><li><p>为什么要改进LOAM？</p><ul><li>当无人地面小车（UGV）具有平滑运动和稳定特征并有足够的计算资源支持时，我们可以获得低漂移运动估计。然而，当<strong>资源有限</strong>时，LOAM的性能会下降</li><li>需要密集3D点云中每个点的粗糙度，轻量级嵌入式系统上特征提取的<strong>更新频率无法始终跟上传感器的更新频率</strong></li><li>无人车在嘈杂环境中的运行也带来了挑战：由于小型 UGV 上激光雷达的安装位置通常靠近地面，因此<strong>来自地面的传感器噪声</strong>（草、树叶）可能会持续存在——&gt;配准不准确和较大的漂移</li></ul></li><li><p><strong>改进</strong>——&gt;<strong>轻量级</strong>且<strong>地面优化</strong>的LOAM（LeGo-LOAM）</p><ul><li>用于在地形可变的复杂环境中对UGV进行位姿估计</li><li>轻量级——可以在嵌入式系统上实现实时姿态估计和映射</li><li>执行点云分割以丢弃地面分离后可能代表不可靠特征的点</li><li><p>地面优化</p><ul><li>step1:从地面提取的平面特征来获得[t$_z$，θ$_{roll}$，θ$_{pitch}$]</li><li>step2:通过匹配从分割点云中提取的边缘特征来获得其余变换[t$_x$，t$_y$，θ$_{yaw}$]</li></ul></li><li><p>集成了执行闭环的能力来纠正运动估计漂移</p></li></ul></li></ul><h2 id="2-轻型激光雷达测距和测绘"><a href="#2-轻型激光雷达测距和测绘" class="headerlink" title="2.轻型激光雷达测距和测绘"></a>2.轻型激光雷达测距和测绘</h2><h3 id="2-1-系统概述与分析"><a href="#2-1-系统概述与分析" class="headerlink" title="2.1 系统概述与分析"></a>2.1 系统概述与分析</h3><ul><li><p>系统框架：该系统接收来自3D激光雷达的输入并输出6DOF位姿估计。整个系统分为五个模块如下：</p><p><img src="/2024/10/19/LeGO-LOAM/系统框架.png" alt="系统框架"></p><ul><li><p><strong>Segmentation分割</strong>：将单个<strong>扫描的点云(Point Cloud)</strong>投影到范围图像上进行分割</p><ul><li><p>在分割之前，对距离图像进行列式评估，将其视为地平面估计，以进行地面点的提取。在此过程之后，可能代表地面的点被标记为地面点，并且不用分割</p></li><li><p>将基于图像的分割方法应用于距离图像，将点分组为许多簇。来自同一簇的点被分配一个唯一的标签（地面点是一种特殊类型的簇）——将分割应用于点云可以提高处理效率和特征提取精度</p></li><li><p>为了使用分割的点云执行快速可靠的特征提取，省略了少于30个点的簇，仅保留可能代表大型物体的点</p></li><li><p>处理后的点云如b图所示，红点为地面点，其他点是分割后剩余的点</p><p><img src="/2024/10/19/LeGO-LOAM/b图.png" alt="b图"></p></li><li><p>每个点的三个属性：</p><ul><li>其标签作为地面点或分割点</li><li>其在范围图像中的列和行索引</li><li>其范围值</li></ul></li></ul></li><li><p><strong>Feature Extraction特征提取</strong>：将分割后的点云发送到特征提取模块</p><ul><li><p>为了从各个方向均匀地提取特征，我们将距离图像水平划分为几个相等的子图像。我们根据子图像每一行中的点的粗糙值c对他们进行排序</p></li><li><p>我们用阈值c$_{th}$来区分不同类型的特征</p><ul><li>c&gt;c$_{th}$称为边缘特征</li><li>c&lt;c$_{th}$称为平面特征</li></ul></li><li><p>从子图像的每一行中选择n$_{Fe}$个不属于地面、c最大的边缘特征点；以相同方式选择具有最小c的n$_{Fp}$个平面特征点，将这些点标记为地面点或分段点</p></li><li><p>如图d所示，绿色点表示F$_e$的边缘特征，粉色点表示F${_p}$中的平面特征</p><p><img src="/2024/10/19/LeGO-LOAM/特征提取.png" alt="特征提取"></p></li><li><p>从子图像的每一行中提取具有最大c的n$_{Fe}$边缘特征，这些特征不属于地面。同理，从子图像的每一行提取具有最小c的n$_{Fp}$平面特征，这些特征必须是地面点</p></li><li><p>提取过后的点云如图c所示，蓝色点表示F$_{e}$中边缘特征，黄色点表示F$_{p}$中平面特征</p><p><img src="/2024/10/19/LeGO-LOAM/c图.png" alt="c图" style="zoom: 80%;"></p></li></ul></li><li><p><strong>Lidar Odometry激光雷达里程计</strong>：激光雷达里程计使用从前一个模块提取的特征来查找与连续扫描相关的变换</p><ul><li><p>激光雷达里程计模块估计两次连续扫描之间的传感器运动，通过执行点到边缘和点到平面扫描匹配来找到两次扫描之间的变换</p></li><li><p>我们需要从前一次扫描的特征集<em>F$_{e}$^t-1^</em> 和<em>F$_{p}$^t-1^</em> 中找到F$_{e}$^t^ 和F$_{p}$^t^ 的点对应的特征</p></li><li><p>进行一些改动来提高特征匹配的准确性和效率</p><ol><li><p>标签匹配：由于F$_e$<sup>t</sup>  和F$_p$<sup>t</sup>  中的每个特征在分割后都用其标签进行编码，因此我们只能从<em>F$_{e}$<sup>t-1</sup></em> 和<em>F$_{p}$<sup>t-1</sup></em>中找到具有相同标签的对应关系；对于F$_p$<sup>t</sup> 中的平面特征，仅使用<em>F$_{p}$<sup>t-1</sup></em> 中标记为地面点的点来查找平面块作为对应。对于F$_e$<sup>t</sup> 中的边缘特征，其相应的边缘线可以在分段簇的<em>F$_{e}$<sup>t-1</sup></em> 中找到——&gt;提高匹配精度，在两次扫描之间更有可能找到同一对象的匹配对应关系，缩小了潜在通信候选人的范围</p></li><li><p>两步L-M优化：当前扫描的边缘和平面特征点之间的距离的一系列非线性表达式以及它们与先前扫描的对应关系被编译成单个综合距离向量。应用 Levenberg-Marquardt (L-M) 方法来查找两次连续扫描之间的最小距离变换。</p><ul><li><p>最优变换T分两步找到：</p><p>（1）[t$_z$，θ$_{roll}$，θ$_{pitch}$]通过匹配F$_p$<sup>t</sup> 中的平面特征以及在<em>F$_{p}$<sup>t-1</sup></em>中的对应关系来估计；</p><p>（2）剩余的[t$_x$，t$_y$，θ$_{yaw}$]使用F$_e$<sup>t</sup> 中的边缘特征以及在<em>F$_{e}$<sup>t-1</sup></em>中的对应关系进行估计，同时使用[t$_z$，θ$_{roll}$，θ$_{pitch}$]作为约束</p></li><li><p><img src="/2024/10/19/LeGO-LOAM/雷达激光里程计.png" alt="雷达激光里程计"></p></li></ul></li></ol></li></ul></li><li><p><strong>Lidar Mapping激光雷达绘图</strong>：这些特征在激光雷达绘图中得到进一步处理，将它们注册到全局点云地图上</p><ul><li>LeGO-LOAM的主要区别在于最终点云图的存储方式。不保存单个点云图，而是保存单个单独的特征集{F$_e$<sup>t</sup> , F$_p$<sup>t</sup>}</li><li>将 pose-graph SLAM集成到LeGO-LOAM中，每个特征集的传感器姿态可以被建模为姿态图中的节点。特征集{F$_e$<sup>t</sup> , F$_p$<sup>t</sup>}可以被视为该节点的传感器测量</li></ul></li><li><p><strong>Transform Integration变换积分模块</strong>：变换积分模块融合激光雷达里程计和激光雷达测绘的位姿估计结果，并输出最终的<strong>位姿估计(Pose Estimation)</strong></p></li></ul></li><li><p>寻求提高地面车辆的效率和准确性</p></li></ul><h2 id="3-实验"><a href="#3-实验" class="headerlink" title="3.实验"></a>3.实验</h2><p>在不同环境下的实验，定性和定量地分析了LOAM和LeGO-LOAM的性能</p><ul><li><p>小规模UGV试验</p><ul><li><p>在覆盖植被的室外环境中手动驱动机器人</p></li><li><p>展示了该环境中特征提取的定性比较</p><p><img src="/2024/10/19/LeGO-LOAM/小型UGV测试.png" alt="小规模UGV实验" style="zoom:70%;"></p></li><li><p>如上图测试结果，边缘特征用绿色着色，平面特征用粉色着色。从LOAM获得的特征如图b和图c所示。从LeGO-LOAM获得的特征如图d和e所示。标签(i)表示一棵树，标签(ii)表示石墙，标签(iii)表示机器人。——&gt;从图d所示中看出，点云分割后LeGO-LOAM的特征数量大大减少（从树叶返回的大多数点都被丢弃，因为它们在多次扫描中不是稳定的特征；从草地返回的点也十分嘈杂，评估后会得出较大的粗糙度值。）要从原始LOAM进行提取边缘特征提取。</p><ul><li>对LOAM和LeGO-LOAM使用相同的c$_{th}$：虽然可以通过更改LOAM中提取边缘和平面特征的粗糙度阈值c$_{th}$来减少特征数量并过滤掉草和树叶的不稳定特征，但有时会遇到糟糕的结果。若增加c$_{th}$以从环境中提取更稳定的边缘特征，如果机器人进入到相对干净的环境，这种变化可能导致有用的边缘特征数量不足。</li></ul><p><img src="/2024/10/19/LeGO-LOAM/小型UGV测试2.png" alt="LOAM测试不稳定" style="zoom:70%;"></p></li><li><p>由于不稳定特征特征导致错误的特征关联，如上图图a所示，LOAM的地图在运行过程中出现两次分歧</p></li></ul></li><li><p>大规模UGV试验</p><ul><li><p>在三个大型数据集上对LOAM和LeGO-LOAM进行定量比较</p></li><li><p>实验1：旨在证明LOAM和LeGO-LOAM都可以在城市环境中实现平滑运动的低漂移位姿估计</p><p><img src="/2024/10/19/LeGO-LOAM/大型UGV测试1.png" alt="实验1" style="zoom:75%;"></p><ul><li>我们避免激进的偏航操纵，并且避免驾驶机器人穿过只能获得一些稳定特征的稀疏区域</li><li>评估两种方法的姿态估计精度——&gt;比较了最终姿态和初始姿态之间的平移和旋转差异</li><li>在上图中图b是在Jetson上运行时，LeGO-LOAM的最终地图</li></ul></li><li><p>实验2：LeGO-LOAM的精度比LOAM高一个数量级</p><p><img src="/2024/10/19/LeGO-LOAM/MyBlog\source\_posts\LeGO-LOAM\大型UGV测试2.png" alt="大型UGV测试2" style="zoom:80%;"></p><ul><li>LOAM在行驶穿过<u>图a中的人行道</u>中位姿估计出现了偏差（这种环境是LOAM可能经常失败的环境，墙和柱子位于人形道的一端，<strong>这些结构中提取的边缘和平面特征是稳定的</strong>。人行道的另外一端是开放区域，覆盖杂乱的物体——&gt;导致特征提取不可靠）</li><li>在驶过这条人行道后不存在以下问题<ul><li>（1）没有从被草覆盖的地面中提取边缘特征</li><li>（2）分割后滤除树叶的噪声传感器读数</li></ul></li></ul></li><li><p>实验3</p><p><img src="/2024/10/19/LeGO-LOAM/大型UGV测试3.png" alt="大型UGV测试3" style="zoom:67%;"></p><ul><li>上图为Jetson上的LeGO-LOAM的最终点云图（叠加在卫星图像上）</li><li>LeGO-LOAM 的点云地图与露天可见的三棵树非常匹配</li><li>两台计算机上从 LeGO-LOAM 获取的所有路径都显示出高度一致性</li></ul></li></ul></li><li><p>使用KITTI数据集的循环闭合测试</p><p><img src="/2024/10/19/LeGO-LOAM/MyBlog\source\_posts\LeGO-LOAM\KITTI数据集进行测试.png" alt="KITTI测试" style="zoom:75%;"></p><ul><li>我们只探索 LeGO-LOAM 及其在嵌入式系统实时应用中的潜力，其中行程长度足够大需要完整的 SLAM 解决方案</li><li>为了在Jetson上实现实时性能，每次扫描的 75% 的点在处理之前都会被省略</li><li>使用ICP在位姿图中的节点之间添加约束，使用iSAM优化该图。最后我们使用优化后的图来校正传感器位姿和地图</li></ul></li></ul><h2 id="4-结论与讨论"><a href="#4-结论与讨论" class="headerlink" title="4.结论与讨论"></a>4.结论与讨论</h2><ul><li>LeGO-LOAM是一种<strong>轻量级</strong>且<strong>地面优化</strong>的激光雷达里程计和测绘方法，用于在复杂环境中对无人车进行实时姿态估计<ul><li>轻量级——可以在嵌入式系统上使用并实现实时性能</li><li>地面优化——利用地面分离、点云分割和改进的L-M优化。在此过程中，可能代表不可靠特征的无价值点被过滤掉，两步L-M优化分别计算姿态变换的不同组成部分</li></ul></li><li>未来的工作方向：将LeGO-LOAM拓展到其他车辆如无人机（UAV），下面将讨论其应用于无人机时候的一些情况<ul><li>不会假设扫描存在地面</li><li>扫描的点云将被分割，无需地面提取</li><li>对于<em>F$_{e}$</em>、F$_{e}$ 和 F$_{p}$ 的选择，特征提取过程是相同的，<em>F$_p$</em> 中的特征将从所有分割点中选择，而不是从标记为地面点的点中提取<em>F$_p$</em> 的平面特征</li><li>使用原来的额L-M方法来获得两次扫描之间的变换，而不是使用两步优化方法</li></ul></li><li>LeGO-LOAM在线执行闭环的能力使其成为长时间导航任务的有用工具</li></ul><h2 id="5-安装调试运行"><a href="#5-安装调试运行" class="headerlink" title="5.安装调试运行"></a>5.安装调试运行</h2><ul><li>笔者选择的系统是VMWare+Ubuntu18.04</li><li><p>参考的教程引用在此：<a href="https://blog.csdn.net/weixin_40247876/article/details/123735096?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=123735096&amp;sharerefer=PC&amp;sharesource=2301_77774241&amp;sharefrom=from_link">参考教程</a>  </p></li><li><p>根据教程配置环境完成后运行，发现点云无法显示出来，只能显示一条线，如下情况：</p><p><img src="/2024/10/19/LeGO-LOAM/运行bug.png" style="zoom:70%;"></p></li><li><p>解决方法</p><p>（1）将所有的<code>.cpp</code>文件（如下图所示）中的所有<code>/camera_init</code>替换为<code>camera_init</code>（即去掉斜杠）。同理，将<code>/camera</code>替换为<code>camera</code></p><p><img src="/2024/10/19/LeGO-LOAM/cpp设置.png" style="zoom:67%;"></p></li></ul><p>​    （2）将虚拟机设置中的3D图形加速前的打钩选项取消</p><p>​                                                          <img src="/2024/10/19/LeGO-LOAM/虚拟机设置.png" style="zoom:60%;"></p><ul><li><p><a href="https://drive.google.com/drive/folders/1_t5fX5yIqY-y6sAifY8pVWX4O9LCK5R2">测试数据集</a></p></li><li><p>代码部署运行效果</p><p><img src="/2024/10/19/LeGO-LOAM/测试运行结果.png" style="zoom:67%;"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 点云 </tag>
            
            <tag> 激光雷达里程计 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
