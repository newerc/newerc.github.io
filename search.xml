<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>乔布斯演讲</title>
      <link href="/2024/10/30/%E4%B9%94%E5%B8%83%E6%96%AF%E6%BC%94%E8%AE%B2/"/>
      <url>/2024/10/30/%E4%B9%94%E5%B8%83%E6%96%AF%E6%BC%94%E8%AE%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="史蒂夫-乔布斯-Steve-Jobs-斯坦福大学演讲稿"><a href="#史蒂夫-乔布斯-Steve-Jobs-斯坦福大学演讲稿" class="headerlink" title="史蒂夫-乔布斯(Steve Jobs)斯坦福大学演讲稿"></a>史蒂夫-乔布斯(Steve Jobs)斯坦福大学演讲稿</h1><p>​    Thank you. I’m honored to be with you today for your  commencement from one of the finest universities in the world. Truth be  told, I never graduated from college and this is the closest I’ve ever  gotten to a college graduation.</p><p>​    Today I want to tell you three stories from my life. That’s it. No big deal. Just three stories.</p><p>​    The first story is about connecting the dots.</p><p>​    I dropped out of Reed College after the first six months but then stayed around as a drop-in for another 18 months or so before I really quit. So why did I drop out? It started before I was born. My  biological mother was a young, unwed graduate student, and she decided  to put me up for adoption. She felt very strongly that I should be  adopted by college graduates, so everything was all set for me to be  adopted at birth by a lawyer and his wife, except that when I popped  out, they decided at the last minute that they really wanted a girl. So  my parents, who were on a waiting list, got a call in the middle of the  night asking, “We’ve got an unexpected baby boy. Do you want him?” They  said, “Of course.” My biological mother found out later that my mother  had never graduated from college and that my father had never graduated  from high school. She refused to sign the final adoption papers. She  only relented a few months later when my parents promised that I would  go to college.</p><p>​    This was the start in my life. And 17 years later, I did go to college, but I naively chose a college that was almost as  expensive as Stanford, and all of my working-class parents’ savings were being spent on my college tuition. After six months, I couldn’t see the value in it. I had no idea what I wanted to do with my life, and no  idea of how college was going to help me figure it out, and here I was,  spending all the money my parents had saved their entire life. So I  decided to drop out and trust that it would all work out OK. It was  pretty scary at the time, but looking back, it was one of the best  decisions I ever made. The minute I dropped out, I could stop taking the required classes that didn’t interest me and begin dropping in on the  ones that looked far more interesting.</p><p>​    It wasn’t all romantic. I didn’t have a dorm room, so I  slept on the floor in friends’ rooms. I returned Coke bottles for the  five-cent deposits to buy food with, and I would walk the seven miles  across town every Sunday night to get one good meal a week at the Hare  Krishna temple. I loved it. And much of what I stumbled into by  following my curiosity and intuition turned out to be priceless later  on. Let me give you one example.</p><p>​    Reed College at that time offered perhaps the best  calligraphy instruction in the country. Throughout the campus every  poster, every label on every drawer was beautifully hand-calligraphed.  Because I had dropped out and didn’t have to take the normal classes, I  decided to take a calligraphy class to learn how to do this. I learned  about serif and sans-serif typefaces, about varying the amount of space  between different letter combinations, about what makes great typography great. It was beautiful, historical, artistically subtle in a way that  science can’t capture, and I found it fascinating.</p><p>​    None of this had even a hope of any practical  application in my life. But ten years later when we were designing the  first Macintosh computer, it all came back to me, and we designed it all into the Mac. It was the first computer with beautiful typography. If I had never dropped in on that single course in college, the Mac would  have never had multiple typefaces or proportionally spaced fonts, and  since Windows just copied the Mac, it’s likely that no personal computer would have them.</p><p>​    If I had never dropped out, I would have never dropped  in on that calligraphy class and personals computers might not have the  wonderful typography that they do.</p><p>​    Of course it was impossible to connect the dots looking  forward when I was in college, but it was very, very clear looking  backwards ten years later. Again, you can’t connect the dots looking  forward. You can only connect them looking backwards, so you have to  trust that the dots will somehow connect in your future. You have to  trust in something—your gut, destiny, life, karma, whatever—because  believing that the dots will connect down the road will give you the  confidence to follow your heart, even when it leads you off the  well-worn path, and that will make all the difference.</p><p>​    My second story is about love and loss. I was lucky. I  found what I loved to do early in life. Woz and I started Apple in my  parents’ garage when I was 20. We worked hard and in ten years, Apple  had grown from just the two of us in a garage into a $2 billion company  with over 4,000 employees. We’d just released our finest creation, the  Macintosh, a year earlier, and I’d just turned 30, and then I got fired. How can you get fired from a company you started? Well, as Apple grew,  we hired someone who I thought was very talented to run the company with me, and for the first year or so, things went well. But then our  visions of the future began to diverge, and eventually we had a falling  out. When we did, our board of directors sided with him, and so at 30, I was out, and very publicly out. What had been the focus of my entire  adult life was gone, and it was devastating. I really didn’t know what  to do for a few months. I felt that I had let the previous generation of entrepreneurs down, that I had dropped the baton as it was being passed to me. I met with David Packard and Bob Noyce and tried to apologize  for screwing up so badly. I was a very public failure and I even thought about running away from the Valley. But something slowly began to dawn  on me. I still loved what I did. The turn of events at Apple had not  changed that one bit. I’d been rejected but I was still in love. And so I decided to start over.</p><p>​    I didn’t see it then, but it turned out that getting  fired from Apple was the best thing that could have ever happened to me. The heaviness of being successful was replaced by the lightness of  being a beginner again, less sure about everything. It freed me to enter one of the most creative periods in my life. During the next five years I started a company named NeXT, another company named Pixar and fell in love with an amazing woman who would become my wife. Pixar went on to  create the world’s first computer-animated feature film, “Toy Story,”  and is now the most successful animation studio in the world.</p><p>​    In a remarkable turn of events, Apple bought NeXT and I  returned to Apple and the technology we developed at NeXT is at the  heart of Apple’s current renaissance, and Lorene and I have a wonderful  family together.</p><p>​    I’m pretty sure none of this would have happened if I  hadn’t been fired from Apple. It was awful-tasting medicine but I guess  the patient needed it. Sometimes life’s going to hit you in the head  with a brick. Don’t lose faith. I’m convinced that the only thing that  kept me going was that I loved what I did. You’ve got to find what you  love, and that is as true for work as it is for your lovers. Your work  is going to fill a large part of your life, and the only way to be truly satisfied is to do what you believe is great work, and the only way to  do great work is to love what you do. If you haven’t found it yet, keep  looking, and don’t settle. As with all matters of the heart, you’ll know when you find it, and like any great relationship it just gets better  and better as the years roll on. So keep looking. Don’t settle.</p><p>​    My third story is about death. When I was 17 I read a  quote that went something like “If you live each day as if it was your  last, someday you’ll most certainly be right.” It made an impression on  me, and since then, for the past 33 years, I have looked in the mirror  every morning and asked myself, “If today were the last day of my life,  would I want to do what I am about to do today?” And whenever the answer has been “no” for too many days in a row, I know I need to change  something. Remembering that I’ll be dead soon is the most important  thing I’ve ever encountered to help me make the big choices in life,  because almost everything—all external expectations, all pride, all  fear of embarrassment or failure—these things just fall away in the  face of death, leaving only what is truly important. Remembering that  you are going to die is the best way I know to avoid the trap of  thinking you have something to lose. You are already naked. There is no  reason not to follow your heart.</p><p>​    About a year ago, I was diagnosed with cancer. I had a  scan at 7:30 in the morning and it clearly showed a tumor on my  pancreas. I didn’t even know what a pancreas was. The doctors told me  this was almost certainly a type of cancer that is incurable, and that I should expect to live no longer than three to six months. My doctor  advised me to go home and get my affairs in order, which is doctors’  code for “prepare to die.” It means to try and tell your kids everything you thought you’d have the next ten years to tell them, in just a few  months. It means to make sure that everything is buttoned up so that it  will be as easy as possible for your family. It means to say your  goodbyes.</p><p>​    I lived with that diagnosis all day. Later that evening I had a biopsy where they stuck an endoscope down my throat, through my  stomach into my intestines, put a needle into my pancreas and got a few  cells from the tumor. I was sedated but my wife, who was there, told me  that when they viewed the cells under a microscope, the doctor started  crying, because it turned out to be a very rare form of pancreatic  cancer that is curable with surgery. I had the surgery and, thankfully, I am fine now.</p><p>​    This was the closest I’ve been to facing death, and I  hope it’s the closest I get for a few more decades. Having lived through it, I can now say this to you with a bit more certainty than when death was a useful but purely intellectual concept. No one wants to die, even people who want to go to Heaven don’t want to die to get there, and  yet, death is the destination we all share. No one has ever escaped it.  And that is as it should be, because death is very likely the single  best invention of life. It’s life’s change agent; it clears out the old  to make way for the new. right now, the new is you. But someday, not too long from now, you will gradually become the old and be cleared away.  Sorry to be so dramatic, but it’s quite true. Your time is limited, so  don’t waste it living someone else’s life. Don’t be trapped by dogma,  which is living with the results of other people’s thinking. Don’t let  the noise of others’ opinions drown out your own inner voice, and most  important, have the courage to follow heart and intuition. They somehow  already know what you truly want to become. Everything else is  secondary.</p><p>​    When I was young, there was an amazing publication called <em>The Whole Earth Catalogue</em>, which was one of the bibles of my generation. It was created by a  fellow named Stuart Brand not far from here in Menlo Park, and he  brought it to life with his poetic touch. This was in the late 1960s,  before personal computers and desktop publishing, so it was all made  with typewriters, scissors, and Polaroid cameras. it was sort of like  Google in paperback form 35 years before Google came along. It was  idealistic, overflowing with neat tools and great notions. Stuart and  his team put out several issues of the <em>The Whole Earth Catalogue</em>, and then when it had run its course, they put out a final issue. It was the mid-1970s and I was your age. On the back cover of their final  issue was a photograph of an early morning country road, the kind you  might find yourself hitch-hiking on if you were so adventurous. Beneath  were the words, “Stay hungry, stay foolish.” It was their farewell  message as they signed off. “Stay hungry, stay foolish.” And I have  always wished that for myself, and now, as you graduate to begin anew, I wish that for you. Stay hungry, stay foolish.</p><p>​    Thank you all, very much.</p>]]></content>
      
      
      
        <tags>
            
            <tag> English </tag>
            
            <tag> 自用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卷积神经网络</title>
      <link href="/2024/10/29/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
      <url>/2024/10/29/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p>本课程学习参考：<a href="https://www.bilibili.com/video/BV1c4411d7jb/?share_source=copy_web&vd_source=214f3ec2acac9eb6d3dd745087b55d2a" target="_blank" rel="noopener noreferrer">湖科大计网微课堂</a></p><h1 id="第一章s"><a href="#第一章s" class="headerlink" title="第一章s"></a>第一章s</h1><h2 id="因特网概述"><a href="#因特网概述" class="headerlink" title="因特网概述"></a>因特网概述</h2><ul><li><strong>网络（Network）</strong>：由若干<strong>结点（Node）</strong>和连接这些结点的<strong>链路（Link）</strong>组成</li><li><strong>互联(连)网（internet）：</strong>通用名词；多个网络通过路由器互连起来，构成覆盖范围更大的网络；“网络的网络”；这些网络之间的通信协议可以是任意的</li><li><p><strong>因特网（Internet）</strong>：专有名词；指当前全球最大的、开放的、由众多网络相互连接而成的特定计算机网络，它采用TCP/IP协议作为通信的规则，前身是美国的AR</p></li><li><p>因特网服务提供者<strong>ISP(Internet Service Provider)</strong>——如中国电信、中国联通、中国移动</p></li><li><p>基于ISP的三层结构的因特网</p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/基于ISP的三层结构的因特网.png" style="zoom:80%;"></p><ul><li>从上图可以看出，因特网逐渐演变成基于ISP的多层次结构网络</li><li>A B两台相隔较远的主机间的通信需要经过多个ISP</li><li>如果一个用户能够接入因特网，那它也能成为一个ISP，需要做的是购买一些调制解调器或路由器这样的设备，让其他用户与其相连</li></ul></li><li><p>因特网的标准化工作（了解即可）</p><ul><li>特点：<strong>面向公众</strong></li><li><strong>RFC（Request For Comments）技术文档</strong>→”面向公众”的因特网特点</li><li>因特网协会ISOC<ul><li>因特网体系结构委员会IAB负责管理因特网有关协议的开发</li><li>因特网工程部IETF负责研究中短期工程问题，主要针对协议的开发和标准化</li><li>因特网研究部IRTF，从事理论方面的研究和开发一些需要长期考虑的问题</li></ul></li><li>制定因特网的正式标准需要经过一下四个阶段<ul><li>因特网草案（在这个阶段还不是RFC文档）</li><li>建议标准（在这个阶段开始成为RFC文档）</li><li>草案标准</li><li>因特网标准</li></ul></li><li>注意：并非所有RFC文档都是因特网标准，只有一小部分RFC文档最后才能变成因特网标准</li></ul></li><li><p><strong>因特网的组成</strong></p><ul><li><p><strong>边缘部分</strong>：由所有连接在因特网上的<strong>主机</strong>（智能设备或者大型服务器）组成。这部分是<strong>用户直接使用</strong>的，用来进行<strong>通信</strong>（传送数据、音频或视频）和<strong>资源共享</strong></p></li><li><p><strong>核心部分</strong>：由<strong>大量网络</strong>和连接这些网络的<strong>路由器</strong>组成。这部分是<strong>为边缘部分提供服务</strong>的（提供连通性和交换）</p><ul><li>特殊作用——路由器：一种专用计算机，路由器是实现分组交换的关键构件，任务是<strong>转发收到的分组（重要功能）</strong></li></ul><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/因特网的组成.png" style="zoom:80%;"></p></li></ul></li></ul><h2 id="三种交换方式"><a href="#三种交换方式" class="headerlink" title="三种交换方式"></a>三种交换方式</h2><h3 id="电路交换（Circuit-Switching"><a href="#电路交换（Circuit-Switching" class="headerlink" title="电路交换（Circuit Switching)"></a>电路交换（Circuit Switching)</h3><ul><li><p>例子讲解：电话交换机接通电话线的方式成为电路交换</p></li><li><p>电路交换的三个步骤：</p><ol><li>建立连接（分配通信资源）</li><li>通话（一直占用通信资源）</li><li>释放连接（归还通信资源）</li></ol><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/电路交换.png" style="zoom:75%;"></p></li><li><p>从通信资源的分配角度来看，交换（Switching）就是某种方式动态地分配传输线路的资源</p></li><li>当使用电路交换来传送计算机数据时，其线路的传输效率往往很低，因为计算机数据是突发式出现在传输线路上的→计算机网络通常采用分组交换</li></ul><h3 id="⭐分组交换（Packet-Switching）"><a href="#⭐分组交换（Packet-Switching）" class="headerlink" title="⭐分组交换（Packet Switching）"></a>⭐分组交换（Packet Switching）</h3><ul><li><p>最重要的分组交换机是路由器，负责将各种网络互连起来，并对接收到的分组进行转发，也就是进行分组交换</p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/分组转发.png" style="zoom:80%;"></p><ul><li>假设主机H6的用户要给主机H2的用户发送一条信息，（把表示该消息的整块数据称为一个报文）<ul><li>在发送报文之前将较长的报文划分成为一个个更小的等长数据段，在数据段前面加上一些由必要的控制信息组成的首部（也称为“包头”）后，就构成一个分组（简称为“包”）</li><li>添加首部的作用：包含了分组的源地址和目的地址</li><li>主机H6将所构造出的各分组依次发送出去，各分组经过途中各分组交换机的存储转发，最终到达主机H2，主机H2收到这些分组后，去掉它们的首部，将个数据段组合还原出原始报文</li></ul></li></ul></li></ul><h3 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h3><p>表示传输消息的整块数据称为一个<strong>报文</strong></p><h3 id="三种交换方式对比"><a href="#三种交换方式对比" class="headerlink" title="三种交换方式对比"></a>三种交换方式对比</h3><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/三种交换方式.png" style="zoom:80%;"></p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/分组交换的对比.png" style="zoom:80%;"></p><h2 id="计算机网络的定义及分类"><a href="#计算机网络的定义及分类" class="headerlink" title="计算机网络的定义及分类"></a>计算机网络的定义及分类</h2><ul><li><p>计算机网络的最简单的定义：一些<strong>互</strong>相<strong>连</strong>接的、<strong>自治</strong>的计算机的<strong>集合</strong></p><ul><li><strong>互连</strong>：计算机之间可以通过有线或无线的方式进行数据通信</li><li><strong>自治</strong>：独立的计算机，他有自己的硬件和软件，可以单独运行使用</li><li><strong>集合</strong>：至少需要两台计算机</li></ul></li><li><p>计算机网络较好的定义：计算机网路主要由一些<strong>通用的、可编程的硬件互连</strong>而成的，而这些硬件并非专门用来实现某一特定目的（例如，传送数据或视频信号）。这些可编程的硬件能够用来<strong>传送多种不同类型的数据</strong>，并能<strong>支持广泛的和日益增长的应用</strong>。</p></li><li><p>⭐计算机网络的分类</p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/计算机网络的分类.png" style="zoom:80%;"></p></li></ul><h2 id="计算机网络性能指标"><a href="#计算机网络性能指标" class="headerlink" title="计算机网络性能指标"></a>计算机网络性能指标</h2><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/计算机网络性能指标1.png" style="zoom:80%;"></p><p>注意：B与b是不一样的单位换算！</p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/计算机网络性能指标2.png" style="zoom:80%;"></p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/计算机网络性能指标3.png" style="zoom:80%;"></p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/计算机网络性能指标4.png" style="zoom:80%;"></p><ul><li>网卡的发送速率、信道带宽、接口速率共同决定发送速率</li><li><p>在构建网络时候应该做到各设备间以及传输介质的速率匹配，这样子才能做到完全发挥出本应具有的传输性能</p></li><li><p>要计算传播时延首先要确定采用的是什么传输媒体，进而确定电磁波在该介质媒体中的传播速率，图中的三种传播速率应该作为常识被记住</p></li><li><p>在本课讲解中，将排队时延和处理时延统称为处理时延。</p></li><li><p>处理时延在计算时通常忽略不计，计算时要判断是发送时延or处理时延占主导应该具体问题具体分析，示例如下：</p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/发送时延or传输时延主导？.png" style="zoom:80%;"></p></li></ul><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/计算机网络性能指标5.png" style="zoom:80%;"></p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/计算机网络性能指标6.png" style="zoom:80%;"></p><p>[example]：以太网要与无线局域网中某台主机进行信息交互，往返时间RTT是指从源主机发送分组开始，直到源主机收到来自目的主机的确认分组为止所需要的时间</p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/计算机网络性能指标8.png" style="zoom:80%;"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/计算机网络性能指标小结1.png" style="zoom:80%;"></p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/计算机性能指标小结2.png" style="zoom:80%;"></p><p>❗<strong>时延  利用率</strong></p><h2 id="⭐⭐⭐计算机网络体系结构"><a href="#⭐⭐⭐计算机网络体系结构" class="headerlink" title="⭐⭐⭐计算机网络体系结构"></a>⭐⭐⭐计算机网络体系结构</h2><h3 id="常见的计算机网络体系结构"><a href="#常见的计算机网络体系结构" class="headerlink" title="常见的计算机网络体系结构"></a>常见的计算机网络体系结构</h3><ul><li><p><strong>OSI</strong>：开放系统互连参考模型——7层协议体系结构→最终失败</p></li><li><p><strong>IP协议</strong>：网际协议→TCP/IP体系结构的网络层常称为网际层</p></li><li><p>TCP/IP协议体系</p><ul><li><p>一般路由器只包含网络接口层和网际层</p></li><li><p>网络接口层并没有包含具体内容，这样子做的目的是可以互连全世界各种不同的网络接口，如有线的以太网接口、无线局域网的WIFI接口，不限定仅使用一种或几种网络接口</p></li><li><p>IP协议是TCP/IP体系机构网际层的核心协议</p></li><li><p>在TCP/IP协议中包含有大量的协议，IP协议和TCP协议是其中非常重要的两个协议，因此用TCP和IP这两个协议来表示整个协议大家族，常称为TCP/IP协议族</p></li><li><p>在嵌入式系统开发中，TCP/IP协议族常称为TCP/IP协议栈。因为TCP/IP协议体系的分层结构与数据结构中的栈在图形画法上是类似的</p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/常见的计算机网络结构.png" style="zoom:80%;"></p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/常见的计算机网络结构总结图.png" style="zoom:80%;"></p></li></ul></li><li><p>因为网络接口层并不包括实际内容，所以我们在学习的时候将<u>网络接口层→数据链路层、物理层</u></p></li></ul><h3 id="计算机网络体系结构分层的必要性"><a href="#计算机网络体系结构分层的必要性" class="headerlink" title="计算机网络体系结构分层的必要性"></a>计算机网络体系结构分层的必要性</h3><h4 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h4><p><em>两台计算机用一根网线连接起来，应该考虑以下的问题</em></p><ul><li><strong>采用怎样的传输媒体（介质）</strong></li><li><strong>采用怎样的物理接口</strong></li><li><strong>使用怎样的信号表示比特0和1</strong></li></ul><h4 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h4><p>在总线型网络中，如下图所示：主机A要给主机C发送数据，表示数据的信号会通过总线传播到总线上的每一个主机。主机C如何知道该数据是发送给自己，自己要接受？而主机B、D、E又如何知道该数据并不是发送给自己的，自己应该拒绝？自然而然引出下面的问题：</p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/数据链路层.png" style="zoom:70%;"></p><ul><li><strong>如何标识网络中的各主机（主机编址问题、例如MAC地址）</strong></li><li><strong>如何从信号所表示的一连串比特流中区分出地址和数据</strong></li><li>（总线型网络在主机同时向总线发送信号→出现信号碰撞）<strong>如何协调各主机争用主线</strong></li></ul><p>Tips：这种总线型网络早已淘汰，现在常用的是使用以太网交换机将多台主机互连形成的交换式以太网</p><ul><li><u>只要有了物理层和数据链路层，我们就可以实现分组在一个网络上传输，但因为我们使用的因特网是由非常多的路由器互连起来，仅解决物理层和数据链路层还是不能工作</u></li></ul><h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/网络层.png" style="zoom:80%;"></p><ul><li><p><strong>如何标识各网络以及网络中的各主机（网络和主机共同编址问题，例如IP地址）</strong></p></li><li><p><strong>路由器如何转发分组，进行路由选择</strong></p></li><li><p><u>解决了物理层、数据链路层和网络层，我们就可以实现分组在网络间传输的问题</u></p></li></ul><h4 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h4><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/运输层.png" style="zoom:80%;"></p><ul><li><strong>如何解决进程之间基于网络的通信问题</strong>（例如：主机有两个进程分别是浏览器进程和QQ进程，在某一时刻主机收到了来自服务器的分组，那么这些分组应该交给浏览器进程处理呢还是交给QQ进程处理呢？）</li><li><p><strong>出现传输错误时，如何处理</strong></p></li><li><p><u>解决了上面四层各自的问题，则可以实现进程之间基于网络的通信，在此基础上只需要制定各种应用层协议，并按照协议标准编写相应的应用程序，通过应用进程间的交互来完成特定的网络应用</u></p></li></ul><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/应用层.png" style="zoom:80%;"></p><ul><li><p><strong>通过应用进程间的交互来完成特定的网络应用</strong></p><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4></li></ul><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/计算机网络体系分层结构分层必要性——小结.png" style="zoom:80%;"></p><h3 id="计算机网络体系结构分层思想举例"><a href="#计算机网络体系结构分层思想举例" class="headerlink" title="计算机网络体系结构分层思想举例"></a>计算机网络体系结构分层思想举例</h3><ol><li><p>如下举例（简化）：</p><ul><li><p>主机属于计算机网络N1，Web服务器属于网络N2，N1和N2通过路由器互连，使用主机中的浏览器来访问Web服务器。</p></li><li><p>输入网址后，主机会向Web服务器发送请求，Web服务器收到请求以后会发回相应的响应</p></li><li><p>主机浏览器收到响应后，将其解析为具体的网页内容显示出来</p></li></ul><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/计算机体系结构分层思想举例.png" style="zoom:80%;"></p></li><li><p>浏览器进程与Web服务器进程之间基于网络通信（N1和N2是以太网）</p></li></ol><h4 id="主机端"><a href="#主机端" class="headerlink" title="主机端"></a>主机端</h4><ul><li><p>应用层按照HTTP协议构建HTTP请求报文</p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/example1.png" style="zoom:80%;"></p></li><li><p>→运输层给HTTP请求报文添加一个TCP首部，成为TCP报文段</p><ul><li>首部作用：区分应用进程、实现可靠传输</li></ul><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/example2.png" style="zoom:80%;"></p></li><li><p>→网络层给TCP报文段添加IP首部，成为IP数据报</p><ul><li>使IP数据报能够在互联网上传输，也就是被路由器转发</li></ul><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/example3.png" style="zoom:80%;"></p></li><li><p>→数据链路层给IP数据报添加一个首部和一个尾部，成为帧</p><ul><li>首部作用：让帧能够在一段链路上或一个网络上传输，能够被相应的主机接收</li><li>尾部作用：让目的主机检查所接受到的帧是否有误码</li></ul><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/example4.png" style="zoom:80%;"></p></li><li><p>→物理层将帧看做比特流，物理层给比特流前面添加前导码</p><ul><li>前导码作用：让目的主机做好接收帧的准备</li></ul><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/example5.png" style="zoom:80%;"></p></li><li><p>→物理层将比特流变换成相应的信号发送到传输媒体，信号通过传输媒体到达路由器</p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/example6.png" style="zoom:80%;"></p></li></ul><h4 id="路由器端"><a href="#路由器端" class="headerlink" title="路由器端"></a>路由器端</h4><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/example7.png" style="zoom:80%;"></p><ul><li><p>→物理层将信号变换为比特流，去掉前导码，交付</p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/example8.png" style="zoom:80%;"></p></li><li><p>→数据链路层将帧的首部和尾部去掉，交付</p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/example10.png" style="zoom:80%;"></p></li><li><p>→网络层解析IP数据报的首部，从中提取出目的网络地址，查找自身路由表，确定转发端口，以便进行转发，交付</p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/example11.png" style="zoom:80%;"></p></li><li><p>→数据链路层给IP数据报添加一个首部和一个尾部成为帧，交付</p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/example12.png" style="zoom:80%;"></p></li><li><p>→物理层将帧看作比特流，因为N2是以太网，所以物理层还会给该比特流前面添加前导码</p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/example13.png" style="zoom:80%;"></p></li><li><p>→物理层将添加有前导码的比特流变换成相应的信号发送到传输媒体</p></li></ul><h4 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h4><ul><li><p>物理层将信号变换为比特流，去掉前导码，交付</p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/example111.png" style="zoom:80%;"></p></li><li><p>→数据链路层，将帧首部和尾部去掉，交付</p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/example222.png" style="zoom:80%;"></p></li><li><p>→网络层，将IP数据报首部去掉后，交付</p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/example333.png" style="zoom:80%;"></p></li><li><p>→运输层，将TCP报文段首部去掉后，交付</p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/example444.png" style="zoom:80%;"></p></li><li><p>→应用层，实际上交付的是HTTP请求报文，应用层对HTTP请求报文进行解析，然后给主机发回HTTP响应报文</p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/example555.png" style="zoom:80%;"></p></li></ul><h3 id="计算机网络体系结构中的专用术语"><a href="#计算机网络体系结构中的专用术语" class="headerlink" title="计算机网络体系结构中的专用术语"></a>计算机网络体系结构中的专用术语</h3><ul><li><strong>实体</strong>：任何可发送或接收信息的<strong>硬件</strong>或<strong>软件进程</strong></li><li><p><strong>对等实体</strong>：收发双方<strong>相同层次中的实体</strong></p></li><li><p><strong>协议</strong>：控制两个对等实体进行<strong>逻辑通信的规则的集合</strong></p><ul><li>逻辑通信：实际中并不存在，是我们假设出来的一种通信。目的在于方便我们单独研究体系结构某一层时，不用考虑其它层</li></ul></li><li><p><strong>协议三要素：语法、语义、同步</strong></p><ul><li><strong>语法</strong>：定义所交换信息的格式（由哪些字段和何种顺序构成）</li><li><strong>语义</strong>：定义收发双方所要完成的操作</li><li><strong>同步</strong>：定义收发双方的时序关系</li></ul></li><li><p><strong>服务</strong></p><ul><li>在协议的控制下，两个对等实体间的逻辑通信使得本层能够向上一层提供服务</li><li>要实现本层协议，还需使用下面一层所提供的服务</li><li>协议是<strong>“水平的”</strong>，服务是<strong>“垂直的”</strong></li><li>实体看得见相邻下层所提供的服务，但并不知道实现该服务的具体协议。也就是说，下面的协议对上面的实体是<strong>“透明”</strong>的</li></ul></li><li><p><strong>服务访问点</strong>：同一系统中<strong>相邻两层的实体交换信息的逻辑接口</strong>，用于区分不同的服务类型</p><ul><li>数据链路层的服务访问点为帧的“类型”字段</li><li>网络层的服务访问点为IP数据报首部中的“协议字段”</li><li>运输层的服务访问点为“端口号”</li></ul></li><li><p><strong>服务原语</strong>：上层使用下层所提供的服务必须通过与下层<strong>交换一些命令</strong>，这些命令称为服务原语</p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/服务.png" style="zoom:80%;"></p></li><li><p><strong>协议数据单元PDU</strong>：<strong>对等层次之间传送的数据包</strong>称为该层的协议数据单元</p></li><li><p><strong>服务数据单元SDU</strong>：<strong>同一系统内，层与层之间交换的数据包</strong>称为服务数据单元</p></li><li><p>多个SDU可以合成为一个PDU；一个SDU也可划分为几个PDU</p><p><img src="/2024/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/数据单元.png" style="zoom:80%;"></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 自用 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理</title>
      <link href="/2024/10/24/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
      <url>/2024/10/24/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>EVO</title>
      <link href="/2024/10/21/EVO/"/>
      <url>/2024/10/21/EVO/</url>
      
        <content type="html"><![CDATA[<h1 id="EVO"><a href="#EVO" class="headerlink" title="EVO"></a>EVO</h1><h2 id="WHAT"><a href="#WHAT" class="headerlink" title="WHAT?"></a>WHAT?</h2><ul><li><strong>用于视觉里程计和slam问题的轨迹评估工具</strong></li><li>核心功能：绘制相机的轨迹或者评估估计轨迹与真值的误差</li><li>支持多种数据集的轨迹格式（TUM、KITTI、EuRoC MAV、ROS的bag）以及这些数据格式之间的相互转换</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 轨迹评估工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICP迭代最近点算法</title>
      <link href="/2024/10/20/ICP%E8%BF%AD%E4%BB%A3%E6%9C%80%E8%BF%91%E7%82%B9%E7%AE%97%E6%B3%95/"/>
      <url>/2024/10/20/ICP%E8%BF%AD%E4%BB%A3%E6%9C%80%E8%BF%91%E7%82%B9%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="迭代最近点——Iterative-Closest-Point"><a href="#迭代最近点——Iterative-Closest-Point" class="headerlink" title="迭代最近点——Iterative Closest Point"></a><strong>迭代最近点——Iterative Closest Point</strong></h1><span id="more"></span><p>【点云匹配算法】</p><p>使用领域——三维重建、医学图像处理、机器人视觉、自动驾驶</p><p>在ICP细化中，通过迭代计算最小化两个点云之间的距离，来优化一个点云到另一个点云的转换矩阵（旋转矩阵和平移向量）。</p><p>通过反复迭代，ICP细化算法逐步将两个点云对齐，使得误差越来越小，最终达到一个比较好的配准效果。</p><p>ICP细化算法的具体步骤如下：</p><p>初始化：设定目标点云$P$和源点云$Q$，以及初步的变换矩阵$T_{0}$。</p><p>配准迭代：对于每一次迭代$i=1,2,3,…$，都执行以下步骤：</p><ul><li>a. 对于每个点$p$在目标点云中，找到其在源点云中最近的点$q$。</li></ul><ul><li>b. 计算每对匹配点之间的偏移量（即源点云中的点$q$到目标点云中的点$p$之间的向量$T_{i-1}q-p$）。</li></ul><ul><li>c. 通过最小二乘法估计一个变换矩阵$T_{i}$，将源点云中的点移动和旋转，以最小化偏移量的平方和。</li></ul><ul><li>d. 如果变换矩阵$T_{i}$的误差已经足够小（例如，小于一个阈值），则停止迭代，输出变换矩阵$T_{i}$；否则返回步骤2b。</li></ul><p>输出结果：输出最终的变换矩阵$T_{i}$，将源点云$Q$变换到与目标点云$P$对齐的位置。</p><p>Attention：ICP细化算法的收敛性和准确性与初始变换$T_{0}$的选择密切相关——&gt;选择一个好的初始变换矩阵</p><p>ICP细化算法对噪声和局部最优解比较敏感，需要根据实际应用场景进行调参。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 点云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeGO-LOAM</title>
      <link href="/2024/10/19/LeGO-LOAM/"/>
      <url>/2024/10/19/LeGO-LOAM/</url>
      
        <content type="html"><![CDATA[<h1 id="LeGO-LOAM"><a href="#LeGO-LOAM" class="headerlink" title="LeGO-LOAM"></a>LeGO-LOAM</h1><p>这篇论文介绍了一种名为LeGO-LOAM（Lightweight and Ground-Optimized Lidar Odometry and Mapping）的<strong>轻量级、针对地面优化的激光雷达里程计和建图方法</strong>。</p><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>这篇论文介绍了一种名为LeGO-LOAM（Lightweight and Ground-Optimized Lidar Odometry and Mapping）的<strong>轻量级、针对地面优化的激光雷达里程计和建图方法</strong>。LeGO-LOAM<strong>旨在为地面车辆提供实时的六自由度姿态估计</strong>。该方法的特点如下：</p><ol><li><p>轻量化：能够在低功耗的嵌入式系统上实现实时姿态估计。</p></li><li><p>地面优化：利用地面平面在分割和优化步骤中的存在。</p></li><li><p>实时性能：通过点云分割滤除噪声，通过特征提取获得独特的平面和边缘特征，然后使用两步Levenberg-Marquardt优化方法来解决连续扫描间的六自由度变换的不同部分。</p></li></ol><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>本文侧重于使用3D激光雷达来支持实时状态估计和映射</li></ul><ul><li><p>寻找两次激光雷达扫描之间转换的典型方法——迭代最近点（ICP）。当扫描包含大量的点时，受到高昂的计算成本影响——&gt;引入了一种点对平面ICP的变体，将点与局部平面斑块相匹配；Generalized-ICP提出了一种匹配两次扫描的局部平面斑块的方法。使用有效简单的技术从点云中提取这些特征——特征直方图、视点特征直方图；使用Kanade-Tomasi角检测器从点云中提取通用特征的方法……</p></li><li><p>为什么要改进LOAM？</p><ul><li>当无人地面小车（UGV）具有平滑运动和稳定特征并有足够的计算资源支持时，我们可以获得低漂移运动估计。然而，当<strong>资源有限</strong>时，LOAM的性能会下降</li><li>需要密集3D点云中每个点的粗糙度，轻量级嵌入式系统上特征提取的<strong>更新频率无法始终跟上传感器的更新频率</strong></li><li>无人车在嘈杂环境中的运行也带来了挑战：由于小型 UGV 上激光雷达的安装位置通常靠近地面，因此<strong>来自地面的传感器噪声</strong>（草、树叶）可能会持续存在——&gt;配准不准确和较大的漂移</li></ul></li><li><p><strong>改进</strong>——&gt;<strong>轻量级</strong>且<strong>地面优化</strong>的LOAM（LeGo-LOAM）</p><ul><li>用于在地形可变的复杂环境中对UGV进行位姿估计</li><li>轻量级——可以在嵌入式系统上实现实时姿态估计和映射</li><li>执行点云分割以丢弃地面分离后可能代表不可靠特征的点</li><li><p>地面优化</p><ul><li>step1:从地面提取的平面特征来获得[t$_z$，θ$_{roll}$，θ$_{pitch}$]</li><li>step2:通过匹配从分割点云中提取的边缘特征来获得其余变换[t$_x$，t$_y$，θ$_{yaw}$]</li></ul></li><li><p>集成了执行闭环的能力来纠正运动估计漂移</p></li></ul></li></ul><h2 id="轻型激光雷达测距和测绘"><a href="#轻型激光雷达测距和测绘" class="headerlink" title="轻型激光雷达测距和测绘"></a>轻型激光雷达测距和测绘</h2><h3 id="系统概述与分析"><a href="#系统概述与分析" class="headerlink" title="系统概述与分析"></a>系统概述与分析</h3><ul><li><p>系统框架：该系统接收来自3D激光雷达的输入并输出6DOF位姿估计。整个系统分为五个模块如下：</p><p><img src="/2024/10/19/LeGO-LOAM/系统框架.png" alt="系统框架"></p><ul><li><p><strong>Segmentation分割</strong>：将单个<strong>扫描的点云(Point Cloud)</strong>投影到范围图像上进行分割</p><ul><li><p>在分割之前，对距离图像进行列式评估，将其视为地平面估计，以进行地面点的提取。在此过程之后，可能代表地面的点被标记为地面点，并且不用分割</p></li><li><p>将基于图像的分割方法应用于距离图像，将点分组为许多簇。来自同一簇的点被分配一个唯一的标签（地面点是一种特殊类型的簇）——将分割应用于点云可以提高处理效率和特征提取精度</p></li><li><p>为了使用分割的点云执行快速可靠的特征提取，省略了少于30个点的簇，仅保留可能代表大型物体的点</p></li><li><p>处理后的点云如b图所示，红点为地面点，其他点是分割后剩余的点</p><p><img src="/2024/10/19/LeGO-LOAM/b图.png" alt="b图"></p></li><li><p>每个点的三个属性：</p><ul><li>其标签作为地面点或分割点</li><li>其在范围图像中的列和行索引</li><li>其范围值</li></ul></li></ul></li><li><p><strong>Feature Extraction特征提取</strong>：将分割后的点云发送到特征提取模块</p><ul><li><p>为了从各个方向均匀地提取特征，我们将距离图像水平划分为几个相等的子图像。我们根据子图像每一行中的点的粗糙值c对他们进行排序</p></li><li><p>我们用阈值c$_{th}$来区分不同类型的特征</p><ul><li>c&gt;c$_{th}$称为边缘特征</li><li>c&lt;c$_{th}$称为平面特征</li></ul></li><li><p>从子图像的每一行中选择n$_{Fe}$个不属于地面、c最大的边缘特征点；以相同方式选择具有最小c的n$_{Fp}$个平面特征点，将这些点标记为地面点或分段点</p></li><li><p>如图d所示，绿色点表示F$_e$的边缘特征，粉色点表示F${_p}$中的平面特征</p><p><img src="/2024/10/19/LeGO-LOAM/特征提取.png" alt="特征提取"></p></li><li><p>从子图像的每一行中提取具有最大c的n$_{Fe}$边缘特征，这些特征不属于地面。同理，从子图像的每一行提取具有最小c的n$_{Fp}$平面特征，这些特征必须是地面点</p></li><li><p>提取过后的点云如图c所示，蓝色点表示F$_{e}$中边缘特征，黄色点表示F$_{p}$中平面特征</p><p><img src="/2024/10/19/LeGO-LOAM/c图.png" alt="c图" style="zoom: 80%;"></p></li></ul></li><li><p><strong>Lidar Odometry激光雷达里程计</strong>：激光雷达里程计使用从前一个模块提取的特征来查找与连续扫描相关的变换</p><ul><li><p>激光雷达里程计模块估计两次连续扫描之间的传感器运动，通过执行点到边缘和点到平面扫描匹配来找到两次扫描之间的变换</p></li><li><p>我们需要从前一次扫描的特征集<em>F$_{e}$^t-1^</em> 和<em>F$_{p}$^t-1^</em> 中找到F$_{e}$^t^ 和F$_{p}$^t^ 的点对应的特征</p></li><li><p>进行一些改动来提高特征匹配的准确性和效率</p><ol><li><p>标签匹配：由于F$_e$<sup>t</sup>  和F$_p$<sup>t</sup>  中的每个特征在分割后都用其标签进行编码，因此我们只能从<em>F$_{e}$<sup>t-1</sup></em> 和<em>F$_{p}$<sup>t-1</sup></em>中找到具有相同标签的对应关系；对于F$_p$<sup>t</sup> 中的平面特征，仅使用<em>F$_{p}$<sup>t-1</sup></em> 中标记为地面点的点来查找平面块作为对应。对于F$_e$<sup>t</sup> 中的边缘特征，其相应的边缘线可以在分段簇的<em>F$_{e}$<sup>t-1</sup></em> 中找到——&gt;提高匹配精度，在两次扫描之间更有可能找到同一对象的匹配对应关系，缩小了潜在通信候选人的范围</p></li><li><p>两步L-M优化：当前扫描的边缘和平面特征点之间的距离的一系列非线性表达式以及它们与先前扫描的对应关系被编译成单个综合距离向量。应用 Levenberg-Marquardt (L-M) 方法来查找两次连续扫描之间的最小距离变换。</p><ul><li><p>最优变换T分两步找到：</p><p>（1）[t$_z$，θ$_{roll}$，θ$_{pitch}$]通过匹配F$_p$<sup>t</sup> 中的平面特征以及在<em>F$_{p}$<sup>t-1</sup></em>中的对应关系来估计；</p><p>（2）剩余的[t$_x$，t$_y$，θ$_{yaw}$]使用F$_e$<sup>t</sup> 中的边缘特征以及在<em>F$_{e}$<sup>t-1</sup></em>中的对应关系进行估计，同时使用[t$_z$，θ$_{roll}$，θ$_{pitch}$]作为约束</p></li><li><p><img src="/2024/10/19/LeGO-LOAM/雷达激光里程计.png" alt="雷达激光里程计"></p></li></ul></li></ol></li></ul></li><li><p><strong>Lidar Mapping激光雷达绘图</strong>：这些特征在激光雷达绘图中得到进一步处理，将它们注册到全局点云地图上</p><ul><li>LeGO-LOAM的主要区别在于最终点云图的存储方式。不保存单个点云图，而是保存单个单独的特征集{F$_e$<sup>t</sup> , F$_p$<sup>t</sup>}</li><li>将 pose-graph SLAM集成到LeGO-LOAM中，每个特征集的传感器姿态可以被建模为姿态图中的节点。特征集{F$_e$<sup>t</sup> , F$_p$<sup>t</sup>}可以被视为该节点的传感器测量</li></ul></li><li><p><strong>Transform Integration变换积分模块</strong>：变换积分模块融合激光雷达里程计和激光雷达测绘的位姿估计结果，并输出最终的<strong>位姿估计(Pose Estimation)</strong></p></li></ul></li><li><p>寻求提高地面车辆的效率和准确性</p></li></ul><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>在不同环境下的实验，定性和定量地分析了LOAM和LeGO-LOAM的性能</p><ul><li><p>小规模UGV试验</p><ul><li><p>在覆盖植被的室外环境中手动驱动机器人</p></li><li><p>展示了该环境中特征提取的定性比较</p><p><img src="/2024/10/19/LeGO-LOAM/小型UGV测试.png" alt="小规模UGV实验" style="zoom:70%;"></p></li><li><p>如上图测试结果，边缘特征用绿色着色，平面特征用粉色着色。从LOAM获得的特征如图b和图c所示。从LeGO-LOAM获得的特征如图d和e所示。标签(i)表示一棵树，标签(ii)表示石墙，标签(iii)表示机器人。——&gt;从图d所示中看出，点云分割后LeGO-LOAM的特征数量大大减少（从树叶返回的大多数点都被丢弃，因为它们在多次扫描中不是稳定的特征；从草地返回的点也十分嘈杂，评估后会得出较大的粗糙度值。）要从原始LOAM进行提取边缘特征提取。</p><ul><li>对LOAM和LeGO-LOAM使用相同的c$_{th}$：虽然可以通过更改LOAM中提取边缘和平面特征的粗糙度阈值c$_{th}$来减少特征数量并过滤掉草和树叶的不稳定特征，但有时会遇到糟糕的结果。若增加c$_{th}$以从环境中提取更稳定的边缘特征，如果机器人进入到相对干净的环境，这种变化可能导致有用的边缘特征数量不足。</li></ul><p><img src="/2024/10/19/LeGO-LOAM/小型UGV测试2.png" alt="LOAM测试不稳定" style="zoom:70%;"></p></li><li><p>由于不稳定特征特征导致错误的特征关联，如上图图a所示，LOAM的地图在运行过程中出现两次分歧</p></li></ul></li><li><p>大规模UGV试验</p><ul><li><p>在三个大型数据集上对LOAM和LeGO-LOAM进行定量比较</p></li><li><p>实验1：旨在证明LOAM和LeGO-LOAM都可以在城市环境中实现平滑运动的低漂移位姿估计</p><p><img src="/2024/10/19/LeGO-LOAM/大型UGV测试1.png" alt="实验1" style="zoom:75%;"></p><ul><li>我们避免激进的偏航操纵，并且避免驾驶机器人穿过只能获得一些稳定特征的稀疏区域</li><li>评估两种方法的姿态估计精度——&gt;比较了最终姿态和初始姿态之间的平移和旋转差异</li><li>在上图中图b是在Jetson上运行时，LeGO-LOAM的最终地图</li></ul></li><li><p>实验2：LeGO-LOAM的精度比LOAM高一个数量级</p><p><img src="/2024/10/19/LeGO-LOAM/MyBlog\source\_posts\LeGO-LOAM\大型UGV测试2.png" alt="大型UGV测试2" style="zoom:80%;"></p><ul><li>LOAM在行驶穿过<u>图a中的人行道</u>中位姿估计出现了偏差（这种环境是LOAM可能经常失败的环境，墙和柱子位于人形道的一端，<strong>这些结构中提取的边缘和平面特征是稳定的</strong>。人行道的另外一端是开放区域，覆盖杂乱的物体——&gt;导致特征提取不可靠）</li><li>在驶过这条人行道后不存在以下问题<ul><li>（1）没有从被草覆盖的地面中提取边缘特征</li><li>（2）分割后滤除树叶的噪声传感器读数</li></ul></li></ul></li><li><p>实验3</p><p><img src="/2024/10/19/LeGO-LOAM/大型UGV测试3.png" alt="大型UGV测试3" style="zoom:67%;"></p><ul><li>上图为Jetson上的LeGO-LOAM的最终点云图（叠加在卫星图像上）</li><li>LeGO-LOAM 的点云地图与露天可见的三棵树非常匹配</li><li>两台计算机上从 LeGO-LOAM 获取的所有路径都显示出高度一致性</li></ul></li></ul></li><li><p>使用KITTI数据集的循环闭合测试</p><p><img src="/2024/10/19/LeGO-LOAM/MyBlog\source\_posts\LeGO-LOAM\KITTI数据集进行测试.png" alt="KITTI测试" style="zoom:75%;"></p><ul><li>我们只探索 LeGO-LOAM 及其在嵌入式系统实时应用中的潜力，其中行程长度足够大需要完整的 SLAM 解决方案</li><li>为了在Jetson上实现实时性能，每次扫描的 75% 的点在处理之前都会被省略</li><li>使用ICP在位姿图中的节点之间添加约束，使用iSAM优化该图。最后我们使用优化后的图来校正传感器位姿和地图</li></ul></li></ul><h2 id="结论与讨论"><a href="#结论与讨论" class="headerlink" title="结论与讨论"></a>结论与讨论</h2><ul><li>LeGO-LOAM是一种<strong>轻量级</strong>且<strong>地面优化</strong>的激光雷达里程计和测绘方法，用于在复杂环境中对无人车进行实时姿态估计<ul><li>轻量级——可以在嵌入式系统上使用并实现实时性能</li><li>地面优化——利用地面分离、点云分割和改进的L-M优化。在此过程中，可能代表不可靠特征的无价值点被过滤掉，两步L-M优化分别计算姿态变换的不同组成部分</li></ul></li><li>未来的工作方向：将LeGO-LOAM拓展到其他车辆如无人机（UAV），下面将讨论其应用于无人机时候的一些情况<ul><li>不会假设扫描存在地面</li><li>扫描的点云将被分割，无需地面提取</li><li>对于<em>F$_{e}$</em>、F$_{e}$ 和 F$_{p}$ 的选择，特征提取过程是相同的，<em>F$_p$</em> 中的特征将从所有分割点中选择，而不是从标记为地面点的点中提取<em>F$_p$</em> 的平面特征</li><li>使用原来的额L-M方法来获得两次扫描之间的变换，而不是使用两步优化方法</li></ul></li><li>LeGO-LOAM在线执行闭环的能力使其成为长时间导航任务的有用工具</li></ul><h2 id="安装调试运行"><a href="#安装调试运行" class="headerlink" title="安装调试运行"></a>安装调试运行</h2><ul><li>笔者选择的系统是VMWare+Ubuntu18.04</li><li><p>参考的教程引用在此：<a href="https://blog.csdn.net/weixin_40247876/article/details/123735096?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=123735096&amp;sharerefer=PC&amp;sharesource=2301_77774241&amp;sharefrom=from_link">参考教程</a>  </p></li><li><p>根据教程配置环境完成后运行，发现点云无法显示出来，只能显示一条线，如下情况：</p><p><img src="/2024/10/19/LeGO-LOAM/运行bug.png" style="zoom:70%;"></p></li><li><p>解决方法</p><p>（1）将所有的<code>.cpp</code>文件（如下图所示）中的所有<code>/camera_init</code>替换为<code>camera_init</code>（即去掉斜杠）。同理，将<code>/camera</code>替换为<code>camera</code></p><p><img src="/2024/10/19/LeGO-LOAM/cpp设置.png" style="zoom:67%;"></p></li></ul><p>​    （2）将虚拟机设置中的3D图形加速前的打钩选项取消</p><p>​                                                          <img src="/2024/10/19/LeGO-LOAM/虚拟机设置.png" style="zoom:60%;"></p><ul><li><p><a href="https://drive.google.com/drive/folders/1_t5fX5yIqY-y6sAifY8pVWX4O9LCK5R2">测试数据集</a></p></li><li><p>代码部署运行效果</p><p><img src="/2024/10/19/LeGO-LOAM/测试运行结果.png" style="zoom:67%;"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 点云 </tag>
            
            <tag> 激光雷达里程计 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
